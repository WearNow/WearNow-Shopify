
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Billing
 * 
 */
export type Billing = $Result.DefaultSelection<Prisma.$BillingPayload>
/**
 * Model selectProdcutData
 * 
 */
export type selectProdcutData = $Result.DefaultSelection<Prisma.$selectProdcutDataPayload>
/**
 * Model selectedFilnalProdcutData
 * 
 */
export type selectedFilnalProdcutData = $Result.DefaultSelection<Prisma.$selectedFilnalProdcutDataPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Sessions
 * const sessions = await prisma.session.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Sessions
   * const sessions = await prisma.session.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.billing`: Exposes CRUD operations for the **Billing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Billings
    * const billings = await prisma.billing.findMany()
    * ```
    */
  get billing(): Prisma.BillingDelegate<ExtArgs>;

  /**
   * `prisma.selectProdcutData`: Exposes CRUD operations for the **selectProdcutData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SelectProdcutData
    * const selectProdcutData = await prisma.selectProdcutData.findMany()
    * ```
    */
  get selectProdcutData(): Prisma.selectProdcutDataDelegate<ExtArgs>;

  /**
   * `prisma.selectedFilnalProdcutData`: Exposes CRUD operations for the **selectedFilnalProdcutData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SelectedFilnalProdcutData
    * const selectedFilnalProdcutData = await prisma.selectedFilnalProdcutData.findMany()
    * ```
    */
  get selectedFilnalProdcutData(): Prisma.selectedFilnalProdcutDataDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.2
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Session: 'Session',
    Billing: 'Billing',
    selectProdcutData: 'selectProdcutData',
    selectedFilnalProdcutData: 'selectedFilnalProdcutData'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "session" | "billing" | "selectProdcutData" | "selectedFilnalProdcutData"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Billing: {
        payload: Prisma.$BillingPayload<ExtArgs>
        fields: Prisma.BillingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BillingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BillingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>
          }
          findFirst: {
            args: Prisma.BillingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BillingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>
          }
          findMany: {
            args: Prisma.BillingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>[]
          }
          create: {
            args: Prisma.BillingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>
          }
          createMany: {
            args: Prisma.BillingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BillingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>[]
          }
          delete: {
            args: Prisma.BillingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>
          }
          update: {
            args: Prisma.BillingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>
          }
          deleteMany: {
            args: Prisma.BillingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BillingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BillingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>
          }
          aggregate: {
            args: Prisma.BillingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBilling>
          }
          groupBy: {
            args: Prisma.BillingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BillingGroupByOutputType>[]
          }
          count: {
            args: Prisma.BillingCountArgs<ExtArgs>
            result: $Utils.Optional<BillingCountAggregateOutputType> | number
          }
        }
      }
      selectProdcutData: {
        payload: Prisma.$selectProdcutDataPayload<ExtArgs>
        fields: Prisma.selectProdcutDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.selectProdcutDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectProdcutDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.selectProdcutDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectProdcutDataPayload>
          }
          findFirst: {
            args: Prisma.selectProdcutDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectProdcutDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.selectProdcutDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectProdcutDataPayload>
          }
          findMany: {
            args: Prisma.selectProdcutDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectProdcutDataPayload>[]
          }
          create: {
            args: Prisma.selectProdcutDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectProdcutDataPayload>
          }
          createMany: {
            args: Prisma.selectProdcutDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.selectProdcutDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectProdcutDataPayload>[]
          }
          delete: {
            args: Prisma.selectProdcutDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectProdcutDataPayload>
          }
          update: {
            args: Prisma.selectProdcutDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectProdcutDataPayload>
          }
          deleteMany: {
            args: Prisma.selectProdcutDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.selectProdcutDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.selectProdcutDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectProdcutDataPayload>
          }
          aggregate: {
            args: Prisma.SelectProdcutDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSelectProdcutData>
          }
          groupBy: {
            args: Prisma.selectProdcutDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<SelectProdcutDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.selectProdcutDataCountArgs<ExtArgs>
            result: $Utils.Optional<SelectProdcutDataCountAggregateOutputType> | number
          }
        }
      }
      selectedFilnalProdcutData: {
        payload: Prisma.$selectedFilnalProdcutDataPayload<ExtArgs>
        fields: Prisma.selectedFilnalProdcutDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.selectedFilnalProdcutDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectedFilnalProdcutDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.selectedFilnalProdcutDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectedFilnalProdcutDataPayload>
          }
          findFirst: {
            args: Prisma.selectedFilnalProdcutDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectedFilnalProdcutDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.selectedFilnalProdcutDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectedFilnalProdcutDataPayload>
          }
          findMany: {
            args: Prisma.selectedFilnalProdcutDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectedFilnalProdcutDataPayload>[]
          }
          create: {
            args: Prisma.selectedFilnalProdcutDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectedFilnalProdcutDataPayload>
          }
          createMany: {
            args: Prisma.selectedFilnalProdcutDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.selectedFilnalProdcutDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectedFilnalProdcutDataPayload>[]
          }
          delete: {
            args: Prisma.selectedFilnalProdcutDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectedFilnalProdcutDataPayload>
          }
          update: {
            args: Prisma.selectedFilnalProdcutDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectedFilnalProdcutDataPayload>
          }
          deleteMany: {
            args: Prisma.selectedFilnalProdcutDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.selectedFilnalProdcutDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.selectedFilnalProdcutDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$selectedFilnalProdcutDataPayload>
          }
          aggregate: {
            args: Prisma.SelectedFilnalProdcutDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSelectedFilnalProdcutData>
          }
          groupBy: {
            args: Prisma.selectedFilnalProdcutDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<SelectedFilnalProdcutDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.selectedFilnalProdcutDataCountArgs<ExtArgs>
            result: $Utils.Optional<SelectedFilnalProdcutDataCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    tryOnPerProduct: number | null
  }

  export type SessionSumAggregateOutputType = {
    tryOnPerProduct: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    shop: string | null
    state: string | null
    isOnline: boolean | null
    scope: string | null
    expires: Date | null
    accessToken: string | null
    userId: string | null
    tryOn: boolean | null
    tryOnPerProduct: number | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    shop: string | null
    state: string | null
    isOnline: boolean | null
    scope: string | null
    expires: Date | null
    accessToken: string | null
    userId: string | null
    tryOn: boolean | null
    tryOnPerProduct: number | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    shop: number
    state: number
    isOnline: number
    scope: number
    expires: number
    accessToken: number
    userId: number
    tryOn: number
    tryOnPerProduct: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    tryOnPerProduct?: true
  }

  export type SessionSumAggregateInputType = {
    tryOnPerProduct?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    shop?: true
    state?: true
    isOnline?: true
    scope?: true
    expires?: true
    accessToken?: true
    userId?: true
    tryOn?: true
    tryOnPerProduct?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    shop?: true
    state?: true
    isOnline?: true
    scope?: true
    expires?: true
    accessToken?: true
    userId?: true
    tryOn?: true
    tryOnPerProduct?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    shop?: true
    state?: true
    isOnline?: true
    scope?: true
    expires?: true
    accessToken?: true
    userId?: true
    tryOn?: true
    tryOnPerProduct?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    shop: string
    state: string
    isOnline: boolean
    scope: string | null
    expires: Date | null
    accessToken: string
    userId: string | null
    tryOn: boolean
    tryOnPerProduct: number
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shop?: boolean
    state?: boolean
    isOnline?: boolean
    scope?: boolean
    expires?: boolean
    accessToken?: boolean
    userId?: boolean
    tryOn?: boolean
    tryOnPerProduct?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shop?: boolean
    state?: boolean
    isOnline?: boolean
    scope?: boolean
    expires?: boolean
    accessToken?: boolean
    userId?: boolean
    tryOn?: boolean
    tryOnPerProduct?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    shop?: boolean
    state?: boolean
    isOnline?: boolean
    scope?: boolean
    expires?: boolean
    accessToken?: boolean
    userId?: boolean
    tryOn?: boolean
    tryOnPerProduct?: boolean
  }


  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shop: string
      state: string
      isOnline: boolean
      scope: string | null
      expires: Date | null
      accessToken: string
      userId: string | null
      tryOn: boolean
      tryOnPerProduct: number
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly shop: FieldRef<"Session", 'String'>
    readonly state: FieldRef<"Session", 'String'>
    readonly isOnline: FieldRef<"Session", 'Boolean'>
    readonly scope: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
    readonly accessToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly tryOn: FieldRef<"Session", 'Boolean'>
    readonly tryOnPerProduct: FieldRef<"Session", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
  }


  /**
   * Model Billing
   */

  export type AggregateBilling = {
    _count: BillingCountAggregateOutputType | null
    _avg: BillingAvgAggregateOutputType | null
    _sum: BillingSumAggregateOutputType | null
    _min: BillingMinAggregateOutputType | null
    _max: BillingMaxAggregateOutputType | null
  }

  export type BillingAvgAggregateOutputType = {
    amount: number | null
    strike_amount: number | null
    pro_models: number | null
  }

  export type BillingSumAggregateOutputType = {
    amount: number | null
    strike_amount: number | null
    pro_models: number | null
  }

  export type BillingMinAggregateOutputType = {
    id: string | null
    title: string | null
    tag: string | null
    amount: number | null
    strike_amount: number | null
    products: string | null
    try_on_experiencces: string | null
    product_phots: string | null
    pro_models: number | null
    support_text: string | null
    upload_your_own_model: boolean | null
    hd_photos: boolean | null
    type: string | null
  }

  export type BillingMaxAggregateOutputType = {
    id: string | null
    title: string | null
    tag: string | null
    amount: number | null
    strike_amount: number | null
    products: string | null
    try_on_experiencces: string | null
    product_phots: string | null
    pro_models: number | null
    support_text: string | null
    upload_your_own_model: boolean | null
    hd_photos: boolean | null
    type: string | null
  }

  export type BillingCountAggregateOutputType = {
    id: number
    title: number
    tag: number
    amount: number
    strike_amount: number
    products: number
    try_on_experiencces: number
    product_phots: number
    pro_models: number
    support_text: number
    upload_your_own_model: number
    hd_photos: number
    type: number
    _all: number
  }


  export type BillingAvgAggregateInputType = {
    amount?: true
    strike_amount?: true
    pro_models?: true
  }

  export type BillingSumAggregateInputType = {
    amount?: true
    strike_amount?: true
    pro_models?: true
  }

  export type BillingMinAggregateInputType = {
    id?: true
    title?: true
    tag?: true
    amount?: true
    strike_amount?: true
    products?: true
    try_on_experiencces?: true
    product_phots?: true
    pro_models?: true
    support_text?: true
    upload_your_own_model?: true
    hd_photos?: true
    type?: true
  }

  export type BillingMaxAggregateInputType = {
    id?: true
    title?: true
    tag?: true
    amount?: true
    strike_amount?: true
    products?: true
    try_on_experiencces?: true
    product_phots?: true
    pro_models?: true
    support_text?: true
    upload_your_own_model?: true
    hd_photos?: true
    type?: true
  }

  export type BillingCountAggregateInputType = {
    id?: true
    title?: true
    tag?: true
    amount?: true
    strike_amount?: true
    products?: true
    try_on_experiencces?: true
    product_phots?: true
    pro_models?: true
    support_text?: true
    upload_your_own_model?: true
    hd_photos?: true
    type?: true
    _all?: true
  }

  export type BillingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Billing to aggregate.
     */
    where?: BillingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Billings to fetch.
     */
    orderBy?: BillingOrderByWithRelationInput | BillingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BillingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Billings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Billings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Billings
    **/
    _count?: true | BillingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BillingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BillingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillingMaxAggregateInputType
  }

  export type GetBillingAggregateType<T extends BillingAggregateArgs> = {
        [P in keyof T & keyof AggregateBilling]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBilling[P]>
      : GetScalarType<T[P], AggregateBilling[P]>
  }




  export type BillingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingWhereInput
    orderBy?: BillingOrderByWithAggregationInput | BillingOrderByWithAggregationInput[]
    by: BillingScalarFieldEnum[] | BillingScalarFieldEnum
    having?: BillingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillingCountAggregateInputType | true
    _avg?: BillingAvgAggregateInputType
    _sum?: BillingSumAggregateInputType
    _min?: BillingMinAggregateInputType
    _max?: BillingMaxAggregateInputType
  }

  export type BillingGroupByOutputType = {
    id: string
    title: string
    tag: string | null
    amount: number
    strike_amount: number | null
    products: string
    try_on_experiencces: string
    product_phots: string
    pro_models: number
    support_text: string
    upload_your_own_model: boolean
    hd_photos: boolean
    type: string
    _count: BillingCountAggregateOutputType | null
    _avg: BillingAvgAggregateOutputType | null
    _sum: BillingSumAggregateOutputType | null
    _min: BillingMinAggregateOutputType | null
    _max: BillingMaxAggregateOutputType | null
  }

  type GetBillingGroupByPayload<T extends BillingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BillingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BillingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BillingGroupByOutputType[P]>
            : GetScalarType<T[P], BillingGroupByOutputType[P]>
        }
      >
    >


  export type BillingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    tag?: boolean
    amount?: boolean
    strike_amount?: boolean
    products?: boolean
    try_on_experiencces?: boolean
    product_phots?: boolean
    pro_models?: boolean
    support_text?: boolean
    upload_your_own_model?: boolean
    hd_photos?: boolean
    type?: boolean
  }, ExtArgs["result"]["billing"]>

  export type BillingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    tag?: boolean
    amount?: boolean
    strike_amount?: boolean
    products?: boolean
    try_on_experiencces?: boolean
    product_phots?: boolean
    pro_models?: boolean
    support_text?: boolean
    upload_your_own_model?: boolean
    hd_photos?: boolean
    type?: boolean
  }, ExtArgs["result"]["billing"]>

  export type BillingSelectScalar = {
    id?: boolean
    title?: boolean
    tag?: boolean
    amount?: boolean
    strike_amount?: boolean
    products?: boolean
    try_on_experiencces?: boolean
    product_phots?: boolean
    pro_models?: boolean
    support_text?: boolean
    upload_your_own_model?: boolean
    hd_photos?: boolean
    type?: boolean
  }


  export type $BillingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Billing"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      tag: string | null
      amount: number
      strike_amount: number | null
      products: string
      try_on_experiencces: string
      product_phots: string
      pro_models: number
      support_text: string
      upload_your_own_model: boolean
      hd_photos: boolean
      type: string
    }, ExtArgs["result"]["billing"]>
    composites: {}
  }

  type BillingGetPayload<S extends boolean | null | undefined | BillingDefaultArgs> = $Result.GetResult<Prisma.$BillingPayload, S>

  type BillingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BillingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BillingCountAggregateInputType | true
    }

  export interface BillingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Billing'], meta: { name: 'Billing' } }
    /**
     * Find zero or one Billing that matches the filter.
     * @param {BillingFindUniqueArgs} args - Arguments to find a Billing
     * @example
     * // Get one Billing
     * const billing = await prisma.billing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BillingFindUniqueArgs>(args: SelectSubset<T, BillingFindUniqueArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Billing that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BillingFindUniqueOrThrowArgs} args - Arguments to find a Billing
     * @example
     * // Get one Billing
     * const billing = await prisma.billing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BillingFindUniqueOrThrowArgs>(args: SelectSubset<T, BillingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Billing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingFindFirstArgs} args - Arguments to find a Billing
     * @example
     * // Get one Billing
     * const billing = await prisma.billing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BillingFindFirstArgs>(args?: SelectSubset<T, BillingFindFirstArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Billing that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingFindFirstOrThrowArgs} args - Arguments to find a Billing
     * @example
     * // Get one Billing
     * const billing = await prisma.billing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BillingFindFirstOrThrowArgs>(args?: SelectSubset<T, BillingFindFirstOrThrowArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Billings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Billings
     * const billings = await prisma.billing.findMany()
     * 
     * // Get first 10 Billings
     * const billings = await prisma.billing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billingWithIdOnly = await prisma.billing.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BillingFindManyArgs>(args?: SelectSubset<T, BillingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Billing.
     * @param {BillingCreateArgs} args - Arguments to create a Billing.
     * @example
     * // Create one Billing
     * const Billing = await prisma.billing.create({
     *   data: {
     *     // ... data to create a Billing
     *   }
     * })
     * 
     */
    create<T extends BillingCreateArgs>(args: SelectSubset<T, BillingCreateArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Billings.
     * @param {BillingCreateManyArgs} args - Arguments to create many Billings.
     * @example
     * // Create many Billings
     * const billing = await prisma.billing.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BillingCreateManyArgs>(args?: SelectSubset<T, BillingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Billings and returns the data saved in the database.
     * @param {BillingCreateManyAndReturnArgs} args - Arguments to create many Billings.
     * @example
     * // Create many Billings
     * const billing = await prisma.billing.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Billings and only return the `id`
     * const billingWithIdOnly = await prisma.billing.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BillingCreateManyAndReturnArgs>(args?: SelectSubset<T, BillingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Billing.
     * @param {BillingDeleteArgs} args - Arguments to delete one Billing.
     * @example
     * // Delete one Billing
     * const Billing = await prisma.billing.delete({
     *   where: {
     *     // ... filter to delete one Billing
     *   }
     * })
     * 
     */
    delete<T extends BillingDeleteArgs>(args: SelectSubset<T, BillingDeleteArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Billing.
     * @param {BillingUpdateArgs} args - Arguments to update one Billing.
     * @example
     * // Update one Billing
     * const billing = await prisma.billing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BillingUpdateArgs>(args: SelectSubset<T, BillingUpdateArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Billings.
     * @param {BillingDeleteManyArgs} args - Arguments to filter Billings to delete.
     * @example
     * // Delete a few Billings
     * const { count } = await prisma.billing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BillingDeleteManyArgs>(args?: SelectSubset<T, BillingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Billings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Billings
     * const billing = await prisma.billing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BillingUpdateManyArgs>(args: SelectSubset<T, BillingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Billing.
     * @param {BillingUpsertArgs} args - Arguments to update or create a Billing.
     * @example
     * // Update or create a Billing
     * const billing = await prisma.billing.upsert({
     *   create: {
     *     // ... data to create a Billing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Billing we want to update
     *   }
     * })
     */
    upsert<T extends BillingUpsertArgs>(args: SelectSubset<T, BillingUpsertArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Billings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingCountArgs} args - Arguments to filter Billings to count.
     * @example
     * // Count the number of Billings
     * const count = await prisma.billing.count({
     *   where: {
     *     // ... the filter for the Billings we want to count
     *   }
     * })
    **/
    count<T extends BillingCountArgs>(
      args?: Subset<T, BillingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Billing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillingAggregateArgs>(args: Subset<T, BillingAggregateArgs>): Prisma.PrismaPromise<GetBillingAggregateType<T>>

    /**
     * Group by Billing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BillingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BillingGroupByArgs['orderBy'] }
        : { orderBy?: BillingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BillingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Billing model
   */
  readonly fields: BillingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Billing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BillingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Billing model
   */ 
  interface BillingFieldRefs {
    readonly id: FieldRef<"Billing", 'String'>
    readonly title: FieldRef<"Billing", 'String'>
    readonly tag: FieldRef<"Billing", 'String'>
    readonly amount: FieldRef<"Billing", 'Int'>
    readonly strike_amount: FieldRef<"Billing", 'Int'>
    readonly products: FieldRef<"Billing", 'String'>
    readonly try_on_experiencces: FieldRef<"Billing", 'String'>
    readonly product_phots: FieldRef<"Billing", 'String'>
    readonly pro_models: FieldRef<"Billing", 'Int'>
    readonly support_text: FieldRef<"Billing", 'String'>
    readonly upload_your_own_model: FieldRef<"Billing", 'Boolean'>
    readonly hd_photos: FieldRef<"Billing", 'Boolean'>
    readonly type: FieldRef<"Billing", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Billing findUnique
   */
  export type BillingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Filter, which Billing to fetch.
     */
    where: BillingWhereUniqueInput
  }

  /**
   * Billing findUniqueOrThrow
   */
  export type BillingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Filter, which Billing to fetch.
     */
    where: BillingWhereUniqueInput
  }

  /**
   * Billing findFirst
   */
  export type BillingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Filter, which Billing to fetch.
     */
    where?: BillingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Billings to fetch.
     */
    orderBy?: BillingOrderByWithRelationInput | BillingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Billings.
     */
    cursor?: BillingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Billings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Billings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Billings.
     */
    distinct?: BillingScalarFieldEnum | BillingScalarFieldEnum[]
  }

  /**
   * Billing findFirstOrThrow
   */
  export type BillingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Filter, which Billing to fetch.
     */
    where?: BillingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Billings to fetch.
     */
    orderBy?: BillingOrderByWithRelationInput | BillingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Billings.
     */
    cursor?: BillingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Billings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Billings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Billings.
     */
    distinct?: BillingScalarFieldEnum | BillingScalarFieldEnum[]
  }

  /**
   * Billing findMany
   */
  export type BillingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Filter, which Billings to fetch.
     */
    where?: BillingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Billings to fetch.
     */
    orderBy?: BillingOrderByWithRelationInput | BillingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Billings.
     */
    cursor?: BillingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Billings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Billings.
     */
    skip?: number
    distinct?: BillingScalarFieldEnum | BillingScalarFieldEnum[]
  }

  /**
   * Billing create
   */
  export type BillingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * The data needed to create a Billing.
     */
    data: XOR<BillingCreateInput, BillingUncheckedCreateInput>
  }

  /**
   * Billing createMany
   */
  export type BillingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Billings.
     */
    data: BillingCreateManyInput | BillingCreateManyInput[]
  }

  /**
   * Billing createManyAndReturn
   */
  export type BillingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Billings.
     */
    data: BillingCreateManyInput | BillingCreateManyInput[]
  }

  /**
   * Billing update
   */
  export type BillingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * The data needed to update a Billing.
     */
    data: XOR<BillingUpdateInput, BillingUncheckedUpdateInput>
    /**
     * Choose, which Billing to update.
     */
    where: BillingWhereUniqueInput
  }

  /**
   * Billing updateMany
   */
  export type BillingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Billings.
     */
    data: XOR<BillingUpdateManyMutationInput, BillingUncheckedUpdateManyInput>
    /**
     * Filter which Billings to update
     */
    where?: BillingWhereInput
  }

  /**
   * Billing upsert
   */
  export type BillingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * The filter to search for the Billing to update in case it exists.
     */
    where: BillingWhereUniqueInput
    /**
     * In case the Billing found by the `where` argument doesn't exist, create a new Billing with this data.
     */
    create: XOR<BillingCreateInput, BillingUncheckedCreateInput>
    /**
     * In case the Billing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BillingUpdateInput, BillingUncheckedUpdateInput>
  }

  /**
   * Billing delete
   */
  export type BillingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Filter which Billing to delete.
     */
    where: BillingWhereUniqueInput
  }

  /**
   * Billing deleteMany
   */
  export type BillingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Billings to delete
     */
    where?: BillingWhereInput
  }

  /**
   * Billing without action
   */
  export type BillingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
  }


  /**
   * Model selectProdcutData
   */

  export type AggregateSelectProdcutData = {
    _count: SelectProdcutDataCountAggregateOutputType | null
    _min: SelectProdcutDataMinAggregateOutputType | null
    _max: SelectProdcutDataMaxAggregateOutputType | null
  }

  export type SelectProdcutDataMinAggregateOutputType = {
    id: string | null
    productId: string | null
    productName: string | null
    productImage: string | null
    productShop: string | null
  }

  export type SelectProdcutDataMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    productName: string | null
    productImage: string | null
    productShop: string | null
  }

  export type SelectProdcutDataCountAggregateOutputType = {
    id: number
    productId: number
    productName: number
    productImage: number
    productShop: number
    _all: number
  }


  export type SelectProdcutDataMinAggregateInputType = {
    id?: true
    productId?: true
    productName?: true
    productImage?: true
    productShop?: true
  }

  export type SelectProdcutDataMaxAggregateInputType = {
    id?: true
    productId?: true
    productName?: true
    productImage?: true
    productShop?: true
  }

  export type SelectProdcutDataCountAggregateInputType = {
    id?: true
    productId?: true
    productName?: true
    productImage?: true
    productShop?: true
    _all?: true
  }

  export type SelectProdcutDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which selectProdcutData to aggregate.
     */
    where?: selectProdcutDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selectProdcutData to fetch.
     */
    orderBy?: selectProdcutDataOrderByWithRelationInput | selectProdcutDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: selectProdcutDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selectProdcutData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selectProdcutData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned selectProdcutData
    **/
    _count?: true | SelectProdcutDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SelectProdcutDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SelectProdcutDataMaxAggregateInputType
  }

  export type GetSelectProdcutDataAggregateType<T extends SelectProdcutDataAggregateArgs> = {
        [P in keyof T & keyof AggregateSelectProdcutData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSelectProdcutData[P]>
      : GetScalarType<T[P], AggregateSelectProdcutData[P]>
  }




  export type selectProdcutDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: selectProdcutDataWhereInput
    orderBy?: selectProdcutDataOrderByWithAggregationInput | selectProdcutDataOrderByWithAggregationInput[]
    by: SelectProdcutDataScalarFieldEnum[] | SelectProdcutDataScalarFieldEnum
    having?: selectProdcutDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SelectProdcutDataCountAggregateInputType | true
    _min?: SelectProdcutDataMinAggregateInputType
    _max?: SelectProdcutDataMaxAggregateInputType
  }

  export type SelectProdcutDataGroupByOutputType = {
    id: string
    productId: string
    productName: string
    productImage: string | null
    productShop: string
    _count: SelectProdcutDataCountAggregateOutputType | null
    _min: SelectProdcutDataMinAggregateOutputType | null
    _max: SelectProdcutDataMaxAggregateOutputType | null
  }

  type GetSelectProdcutDataGroupByPayload<T extends selectProdcutDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SelectProdcutDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SelectProdcutDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SelectProdcutDataGroupByOutputType[P]>
            : GetScalarType<T[P], SelectProdcutDataGroupByOutputType[P]>
        }
      >
    >


  export type selectProdcutDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    productName?: boolean
    productImage?: boolean
    productShop?: boolean
  }, ExtArgs["result"]["selectProdcutData"]>

  export type selectProdcutDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    productName?: boolean
    productImage?: boolean
    productShop?: boolean
  }, ExtArgs["result"]["selectProdcutData"]>

  export type selectProdcutDataSelectScalar = {
    id?: boolean
    productId?: boolean
    productName?: boolean
    productImage?: boolean
    productShop?: boolean
  }


  export type $selectProdcutDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "selectProdcutData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      productName: string
      productImage: string | null
      productShop: string
    }, ExtArgs["result"]["selectProdcutData"]>
    composites: {}
  }

  type selectProdcutDataGetPayload<S extends boolean | null | undefined | selectProdcutDataDefaultArgs> = $Result.GetResult<Prisma.$selectProdcutDataPayload, S>

  type selectProdcutDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<selectProdcutDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SelectProdcutDataCountAggregateInputType | true
    }

  export interface selectProdcutDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['selectProdcutData'], meta: { name: 'selectProdcutData' } }
    /**
     * Find zero or one SelectProdcutData that matches the filter.
     * @param {selectProdcutDataFindUniqueArgs} args - Arguments to find a SelectProdcutData
     * @example
     * // Get one SelectProdcutData
     * const selectProdcutData = await prisma.selectProdcutData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends selectProdcutDataFindUniqueArgs>(args: SelectSubset<T, selectProdcutDataFindUniqueArgs<ExtArgs>>): Prisma__selectProdcutDataClient<$Result.GetResult<Prisma.$selectProdcutDataPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SelectProdcutData that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {selectProdcutDataFindUniqueOrThrowArgs} args - Arguments to find a SelectProdcutData
     * @example
     * // Get one SelectProdcutData
     * const selectProdcutData = await prisma.selectProdcutData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends selectProdcutDataFindUniqueOrThrowArgs>(args: SelectSubset<T, selectProdcutDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__selectProdcutDataClient<$Result.GetResult<Prisma.$selectProdcutDataPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SelectProdcutData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selectProdcutDataFindFirstArgs} args - Arguments to find a SelectProdcutData
     * @example
     * // Get one SelectProdcutData
     * const selectProdcutData = await prisma.selectProdcutData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends selectProdcutDataFindFirstArgs>(args?: SelectSubset<T, selectProdcutDataFindFirstArgs<ExtArgs>>): Prisma__selectProdcutDataClient<$Result.GetResult<Prisma.$selectProdcutDataPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SelectProdcutData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selectProdcutDataFindFirstOrThrowArgs} args - Arguments to find a SelectProdcutData
     * @example
     * // Get one SelectProdcutData
     * const selectProdcutData = await prisma.selectProdcutData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends selectProdcutDataFindFirstOrThrowArgs>(args?: SelectSubset<T, selectProdcutDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__selectProdcutDataClient<$Result.GetResult<Prisma.$selectProdcutDataPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SelectProdcutData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selectProdcutDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SelectProdcutData
     * const selectProdcutData = await prisma.selectProdcutData.findMany()
     * 
     * // Get first 10 SelectProdcutData
     * const selectProdcutData = await prisma.selectProdcutData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const selectProdcutDataWithIdOnly = await prisma.selectProdcutData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends selectProdcutDataFindManyArgs>(args?: SelectSubset<T, selectProdcutDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$selectProdcutDataPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SelectProdcutData.
     * @param {selectProdcutDataCreateArgs} args - Arguments to create a SelectProdcutData.
     * @example
     * // Create one SelectProdcutData
     * const SelectProdcutData = await prisma.selectProdcutData.create({
     *   data: {
     *     // ... data to create a SelectProdcutData
     *   }
     * })
     * 
     */
    create<T extends selectProdcutDataCreateArgs>(args: SelectSubset<T, selectProdcutDataCreateArgs<ExtArgs>>): Prisma__selectProdcutDataClient<$Result.GetResult<Prisma.$selectProdcutDataPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SelectProdcutData.
     * @param {selectProdcutDataCreateManyArgs} args - Arguments to create many SelectProdcutData.
     * @example
     * // Create many SelectProdcutData
     * const selectProdcutData = await prisma.selectProdcutData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends selectProdcutDataCreateManyArgs>(args?: SelectSubset<T, selectProdcutDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SelectProdcutData and returns the data saved in the database.
     * @param {selectProdcutDataCreateManyAndReturnArgs} args - Arguments to create many SelectProdcutData.
     * @example
     * // Create many SelectProdcutData
     * const selectProdcutData = await prisma.selectProdcutData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SelectProdcutData and only return the `id`
     * const selectProdcutDataWithIdOnly = await prisma.selectProdcutData.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends selectProdcutDataCreateManyAndReturnArgs>(args?: SelectSubset<T, selectProdcutDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$selectProdcutDataPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SelectProdcutData.
     * @param {selectProdcutDataDeleteArgs} args - Arguments to delete one SelectProdcutData.
     * @example
     * // Delete one SelectProdcutData
     * const SelectProdcutData = await prisma.selectProdcutData.delete({
     *   where: {
     *     // ... filter to delete one SelectProdcutData
     *   }
     * })
     * 
     */
    delete<T extends selectProdcutDataDeleteArgs>(args: SelectSubset<T, selectProdcutDataDeleteArgs<ExtArgs>>): Prisma__selectProdcutDataClient<$Result.GetResult<Prisma.$selectProdcutDataPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SelectProdcutData.
     * @param {selectProdcutDataUpdateArgs} args - Arguments to update one SelectProdcutData.
     * @example
     * // Update one SelectProdcutData
     * const selectProdcutData = await prisma.selectProdcutData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends selectProdcutDataUpdateArgs>(args: SelectSubset<T, selectProdcutDataUpdateArgs<ExtArgs>>): Prisma__selectProdcutDataClient<$Result.GetResult<Prisma.$selectProdcutDataPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SelectProdcutData.
     * @param {selectProdcutDataDeleteManyArgs} args - Arguments to filter SelectProdcutData to delete.
     * @example
     * // Delete a few SelectProdcutData
     * const { count } = await prisma.selectProdcutData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends selectProdcutDataDeleteManyArgs>(args?: SelectSubset<T, selectProdcutDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SelectProdcutData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selectProdcutDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SelectProdcutData
     * const selectProdcutData = await prisma.selectProdcutData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends selectProdcutDataUpdateManyArgs>(args: SelectSubset<T, selectProdcutDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SelectProdcutData.
     * @param {selectProdcutDataUpsertArgs} args - Arguments to update or create a SelectProdcutData.
     * @example
     * // Update or create a SelectProdcutData
     * const selectProdcutData = await prisma.selectProdcutData.upsert({
     *   create: {
     *     // ... data to create a SelectProdcutData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SelectProdcutData we want to update
     *   }
     * })
     */
    upsert<T extends selectProdcutDataUpsertArgs>(args: SelectSubset<T, selectProdcutDataUpsertArgs<ExtArgs>>): Prisma__selectProdcutDataClient<$Result.GetResult<Prisma.$selectProdcutDataPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SelectProdcutData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selectProdcutDataCountArgs} args - Arguments to filter SelectProdcutData to count.
     * @example
     * // Count the number of SelectProdcutData
     * const count = await prisma.selectProdcutData.count({
     *   where: {
     *     // ... the filter for the SelectProdcutData we want to count
     *   }
     * })
    **/
    count<T extends selectProdcutDataCountArgs>(
      args?: Subset<T, selectProdcutDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SelectProdcutDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SelectProdcutData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectProdcutDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SelectProdcutDataAggregateArgs>(args: Subset<T, SelectProdcutDataAggregateArgs>): Prisma.PrismaPromise<GetSelectProdcutDataAggregateType<T>>

    /**
     * Group by SelectProdcutData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selectProdcutDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends selectProdcutDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: selectProdcutDataGroupByArgs['orderBy'] }
        : { orderBy?: selectProdcutDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, selectProdcutDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSelectProdcutDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the selectProdcutData model
   */
  readonly fields: selectProdcutDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for selectProdcutData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__selectProdcutDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the selectProdcutData model
   */ 
  interface selectProdcutDataFieldRefs {
    readonly id: FieldRef<"selectProdcutData", 'String'>
    readonly productId: FieldRef<"selectProdcutData", 'String'>
    readonly productName: FieldRef<"selectProdcutData", 'String'>
    readonly productImage: FieldRef<"selectProdcutData", 'String'>
    readonly productShop: FieldRef<"selectProdcutData", 'String'>
  }
    

  // Custom InputTypes
  /**
   * selectProdcutData findUnique
   */
  export type selectProdcutDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectProdcutData
     */
    select?: selectProdcutDataSelect<ExtArgs> | null
    /**
     * Filter, which selectProdcutData to fetch.
     */
    where: selectProdcutDataWhereUniqueInput
  }

  /**
   * selectProdcutData findUniqueOrThrow
   */
  export type selectProdcutDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectProdcutData
     */
    select?: selectProdcutDataSelect<ExtArgs> | null
    /**
     * Filter, which selectProdcutData to fetch.
     */
    where: selectProdcutDataWhereUniqueInput
  }

  /**
   * selectProdcutData findFirst
   */
  export type selectProdcutDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectProdcutData
     */
    select?: selectProdcutDataSelect<ExtArgs> | null
    /**
     * Filter, which selectProdcutData to fetch.
     */
    where?: selectProdcutDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selectProdcutData to fetch.
     */
    orderBy?: selectProdcutDataOrderByWithRelationInput | selectProdcutDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for selectProdcutData.
     */
    cursor?: selectProdcutDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selectProdcutData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selectProdcutData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of selectProdcutData.
     */
    distinct?: SelectProdcutDataScalarFieldEnum | SelectProdcutDataScalarFieldEnum[]
  }

  /**
   * selectProdcutData findFirstOrThrow
   */
  export type selectProdcutDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectProdcutData
     */
    select?: selectProdcutDataSelect<ExtArgs> | null
    /**
     * Filter, which selectProdcutData to fetch.
     */
    where?: selectProdcutDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selectProdcutData to fetch.
     */
    orderBy?: selectProdcutDataOrderByWithRelationInput | selectProdcutDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for selectProdcutData.
     */
    cursor?: selectProdcutDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selectProdcutData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selectProdcutData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of selectProdcutData.
     */
    distinct?: SelectProdcutDataScalarFieldEnum | SelectProdcutDataScalarFieldEnum[]
  }

  /**
   * selectProdcutData findMany
   */
  export type selectProdcutDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectProdcutData
     */
    select?: selectProdcutDataSelect<ExtArgs> | null
    /**
     * Filter, which selectProdcutData to fetch.
     */
    where?: selectProdcutDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selectProdcutData to fetch.
     */
    orderBy?: selectProdcutDataOrderByWithRelationInput | selectProdcutDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing selectProdcutData.
     */
    cursor?: selectProdcutDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selectProdcutData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selectProdcutData.
     */
    skip?: number
    distinct?: SelectProdcutDataScalarFieldEnum | SelectProdcutDataScalarFieldEnum[]
  }

  /**
   * selectProdcutData create
   */
  export type selectProdcutDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectProdcutData
     */
    select?: selectProdcutDataSelect<ExtArgs> | null
    /**
     * The data needed to create a selectProdcutData.
     */
    data: XOR<selectProdcutDataCreateInput, selectProdcutDataUncheckedCreateInput>
  }

  /**
   * selectProdcutData createMany
   */
  export type selectProdcutDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many selectProdcutData.
     */
    data: selectProdcutDataCreateManyInput | selectProdcutDataCreateManyInput[]
  }

  /**
   * selectProdcutData createManyAndReturn
   */
  export type selectProdcutDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectProdcutData
     */
    select?: selectProdcutDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many selectProdcutData.
     */
    data: selectProdcutDataCreateManyInput | selectProdcutDataCreateManyInput[]
  }

  /**
   * selectProdcutData update
   */
  export type selectProdcutDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectProdcutData
     */
    select?: selectProdcutDataSelect<ExtArgs> | null
    /**
     * The data needed to update a selectProdcutData.
     */
    data: XOR<selectProdcutDataUpdateInput, selectProdcutDataUncheckedUpdateInput>
    /**
     * Choose, which selectProdcutData to update.
     */
    where: selectProdcutDataWhereUniqueInput
  }

  /**
   * selectProdcutData updateMany
   */
  export type selectProdcutDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update selectProdcutData.
     */
    data: XOR<selectProdcutDataUpdateManyMutationInput, selectProdcutDataUncheckedUpdateManyInput>
    /**
     * Filter which selectProdcutData to update
     */
    where?: selectProdcutDataWhereInput
  }

  /**
   * selectProdcutData upsert
   */
  export type selectProdcutDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectProdcutData
     */
    select?: selectProdcutDataSelect<ExtArgs> | null
    /**
     * The filter to search for the selectProdcutData to update in case it exists.
     */
    where: selectProdcutDataWhereUniqueInput
    /**
     * In case the selectProdcutData found by the `where` argument doesn't exist, create a new selectProdcutData with this data.
     */
    create: XOR<selectProdcutDataCreateInput, selectProdcutDataUncheckedCreateInput>
    /**
     * In case the selectProdcutData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<selectProdcutDataUpdateInput, selectProdcutDataUncheckedUpdateInput>
  }

  /**
   * selectProdcutData delete
   */
  export type selectProdcutDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectProdcutData
     */
    select?: selectProdcutDataSelect<ExtArgs> | null
    /**
     * Filter which selectProdcutData to delete.
     */
    where: selectProdcutDataWhereUniqueInput
  }

  /**
   * selectProdcutData deleteMany
   */
  export type selectProdcutDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which selectProdcutData to delete
     */
    where?: selectProdcutDataWhereInput
  }

  /**
   * selectProdcutData without action
   */
  export type selectProdcutDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectProdcutData
     */
    select?: selectProdcutDataSelect<ExtArgs> | null
  }


  /**
   * Model selectedFilnalProdcutData
   */

  export type AggregateSelectedFilnalProdcutData = {
    _count: SelectedFilnalProdcutDataCountAggregateOutputType | null
    _min: SelectedFilnalProdcutDataMinAggregateOutputType | null
    _max: SelectedFilnalProdcutDataMaxAggregateOutputType | null
  }

  export type SelectedFilnalProdcutDataMinAggregateOutputType = {
    id: string | null
    productId: string | null
    productName: string | null
    productImage: string | null
    productShop: string | null
  }

  export type SelectedFilnalProdcutDataMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    productName: string | null
    productImage: string | null
    productShop: string | null
  }

  export type SelectedFilnalProdcutDataCountAggregateOutputType = {
    id: number
    productId: number
    productName: number
    productImage: number
    productShop: number
    _all: number
  }


  export type SelectedFilnalProdcutDataMinAggregateInputType = {
    id?: true
    productId?: true
    productName?: true
    productImage?: true
    productShop?: true
  }

  export type SelectedFilnalProdcutDataMaxAggregateInputType = {
    id?: true
    productId?: true
    productName?: true
    productImage?: true
    productShop?: true
  }

  export type SelectedFilnalProdcutDataCountAggregateInputType = {
    id?: true
    productId?: true
    productName?: true
    productImage?: true
    productShop?: true
    _all?: true
  }

  export type SelectedFilnalProdcutDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which selectedFilnalProdcutData to aggregate.
     */
    where?: selectedFilnalProdcutDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selectedFilnalProdcutData to fetch.
     */
    orderBy?: selectedFilnalProdcutDataOrderByWithRelationInput | selectedFilnalProdcutDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: selectedFilnalProdcutDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selectedFilnalProdcutData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selectedFilnalProdcutData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned selectedFilnalProdcutData
    **/
    _count?: true | SelectedFilnalProdcutDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SelectedFilnalProdcutDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SelectedFilnalProdcutDataMaxAggregateInputType
  }

  export type GetSelectedFilnalProdcutDataAggregateType<T extends SelectedFilnalProdcutDataAggregateArgs> = {
        [P in keyof T & keyof AggregateSelectedFilnalProdcutData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSelectedFilnalProdcutData[P]>
      : GetScalarType<T[P], AggregateSelectedFilnalProdcutData[P]>
  }




  export type selectedFilnalProdcutDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: selectedFilnalProdcutDataWhereInput
    orderBy?: selectedFilnalProdcutDataOrderByWithAggregationInput | selectedFilnalProdcutDataOrderByWithAggregationInput[]
    by: SelectedFilnalProdcutDataScalarFieldEnum[] | SelectedFilnalProdcutDataScalarFieldEnum
    having?: selectedFilnalProdcutDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SelectedFilnalProdcutDataCountAggregateInputType | true
    _min?: SelectedFilnalProdcutDataMinAggregateInputType
    _max?: SelectedFilnalProdcutDataMaxAggregateInputType
  }

  export type SelectedFilnalProdcutDataGroupByOutputType = {
    id: string
    productId: string
    productName: string
    productImage: string | null
    productShop: string
    _count: SelectedFilnalProdcutDataCountAggregateOutputType | null
    _min: SelectedFilnalProdcutDataMinAggregateOutputType | null
    _max: SelectedFilnalProdcutDataMaxAggregateOutputType | null
  }

  type GetSelectedFilnalProdcutDataGroupByPayload<T extends selectedFilnalProdcutDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SelectedFilnalProdcutDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SelectedFilnalProdcutDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SelectedFilnalProdcutDataGroupByOutputType[P]>
            : GetScalarType<T[P], SelectedFilnalProdcutDataGroupByOutputType[P]>
        }
      >
    >


  export type selectedFilnalProdcutDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    productName?: boolean
    productImage?: boolean
    productShop?: boolean
  }, ExtArgs["result"]["selectedFilnalProdcutData"]>

  export type selectedFilnalProdcutDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    productName?: boolean
    productImage?: boolean
    productShop?: boolean
  }, ExtArgs["result"]["selectedFilnalProdcutData"]>

  export type selectedFilnalProdcutDataSelectScalar = {
    id?: boolean
    productId?: boolean
    productName?: boolean
    productImage?: boolean
    productShop?: boolean
  }


  export type $selectedFilnalProdcutDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "selectedFilnalProdcutData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      productName: string
      productImage: string | null
      productShop: string
    }, ExtArgs["result"]["selectedFilnalProdcutData"]>
    composites: {}
  }

  type selectedFilnalProdcutDataGetPayload<S extends boolean | null | undefined | selectedFilnalProdcutDataDefaultArgs> = $Result.GetResult<Prisma.$selectedFilnalProdcutDataPayload, S>

  type selectedFilnalProdcutDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<selectedFilnalProdcutDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SelectedFilnalProdcutDataCountAggregateInputType | true
    }

  export interface selectedFilnalProdcutDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['selectedFilnalProdcutData'], meta: { name: 'selectedFilnalProdcutData' } }
    /**
     * Find zero or one SelectedFilnalProdcutData that matches the filter.
     * @param {selectedFilnalProdcutDataFindUniqueArgs} args - Arguments to find a SelectedFilnalProdcutData
     * @example
     * // Get one SelectedFilnalProdcutData
     * const selectedFilnalProdcutData = await prisma.selectedFilnalProdcutData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends selectedFilnalProdcutDataFindUniqueArgs>(args: SelectSubset<T, selectedFilnalProdcutDataFindUniqueArgs<ExtArgs>>): Prisma__selectedFilnalProdcutDataClient<$Result.GetResult<Prisma.$selectedFilnalProdcutDataPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SelectedFilnalProdcutData that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {selectedFilnalProdcutDataFindUniqueOrThrowArgs} args - Arguments to find a SelectedFilnalProdcutData
     * @example
     * // Get one SelectedFilnalProdcutData
     * const selectedFilnalProdcutData = await prisma.selectedFilnalProdcutData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends selectedFilnalProdcutDataFindUniqueOrThrowArgs>(args: SelectSubset<T, selectedFilnalProdcutDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__selectedFilnalProdcutDataClient<$Result.GetResult<Prisma.$selectedFilnalProdcutDataPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SelectedFilnalProdcutData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selectedFilnalProdcutDataFindFirstArgs} args - Arguments to find a SelectedFilnalProdcutData
     * @example
     * // Get one SelectedFilnalProdcutData
     * const selectedFilnalProdcutData = await prisma.selectedFilnalProdcutData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends selectedFilnalProdcutDataFindFirstArgs>(args?: SelectSubset<T, selectedFilnalProdcutDataFindFirstArgs<ExtArgs>>): Prisma__selectedFilnalProdcutDataClient<$Result.GetResult<Prisma.$selectedFilnalProdcutDataPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SelectedFilnalProdcutData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selectedFilnalProdcutDataFindFirstOrThrowArgs} args - Arguments to find a SelectedFilnalProdcutData
     * @example
     * // Get one SelectedFilnalProdcutData
     * const selectedFilnalProdcutData = await prisma.selectedFilnalProdcutData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends selectedFilnalProdcutDataFindFirstOrThrowArgs>(args?: SelectSubset<T, selectedFilnalProdcutDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__selectedFilnalProdcutDataClient<$Result.GetResult<Prisma.$selectedFilnalProdcutDataPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SelectedFilnalProdcutData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selectedFilnalProdcutDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SelectedFilnalProdcutData
     * const selectedFilnalProdcutData = await prisma.selectedFilnalProdcutData.findMany()
     * 
     * // Get first 10 SelectedFilnalProdcutData
     * const selectedFilnalProdcutData = await prisma.selectedFilnalProdcutData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const selectedFilnalProdcutDataWithIdOnly = await prisma.selectedFilnalProdcutData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends selectedFilnalProdcutDataFindManyArgs>(args?: SelectSubset<T, selectedFilnalProdcutDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$selectedFilnalProdcutDataPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SelectedFilnalProdcutData.
     * @param {selectedFilnalProdcutDataCreateArgs} args - Arguments to create a SelectedFilnalProdcutData.
     * @example
     * // Create one SelectedFilnalProdcutData
     * const SelectedFilnalProdcutData = await prisma.selectedFilnalProdcutData.create({
     *   data: {
     *     // ... data to create a SelectedFilnalProdcutData
     *   }
     * })
     * 
     */
    create<T extends selectedFilnalProdcutDataCreateArgs>(args: SelectSubset<T, selectedFilnalProdcutDataCreateArgs<ExtArgs>>): Prisma__selectedFilnalProdcutDataClient<$Result.GetResult<Prisma.$selectedFilnalProdcutDataPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SelectedFilnalProdcutData.
     * @param {selectedFilnalProdcutDataCreateManyArgs} args - Arguments to create many SelectedFilnalProdcutData.
     * @example
     * // Create many SelectedFilnalProdcutData
     * const selectedFilnalProdcutData = await prisma.selectedFilnalProdcutData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends selectedFilnalProdcutDataCreateManyArgs>(args?: SelectSubset<T, selectedFilnalProdcutDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SelectedFilnalProdcutData and returns the data saved in the database.
     * @param {selectedFilnalProdcutDataCreateManyAndReturnArgs} args - Arguments to create many SelectedFilnalProdcutData.
     * @example
     * // Create many SelectedFilnalProdcutData
     * const selectedFilnalProdcutData = await prisma.selectedFilnalProdcutData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SelectedFilnalProdcutData and only return the `id`
     * const selectedFilnalProdcutDataWithIdOnly = await prisma.selectedFilnalProdcutData.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends selectedFilnalProdcutDataCreateManyAndReturnArgs>(args?: SelectSubset<T, selectedFilnalProdcutDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$selectedFilnalProdcutDataPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SelectedFilnalProdcutData.
     * @param {selectedFilnalProdcutDataDeleteArgs} args - Arguments to delete one SelectedFilnalProdcutData.
     * @example
     * // Delete one SelectedFilnalProdcutData
     * const SelectedFilnalProdcutData = await prisma.selectedFilnalProdcutData.delete({
     *   where: {
     *     // ... filter to delete one SelectedFilnalProdcutData
     *   }
     * })
     * 
     */
    delete<T extends selectedFilnalProdcutDataDeleteArgs>(args: SelectSubset<T, selectedFilnalProdcutDataDeleteArgs<ExtArgs>>): Prisma__selectedFilnalProdcutDataClient<$Result.GetResult<Prisma.$selectedFilnalProdcutDataPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SelectedFilnalProdcutData.
     * @param {selectedFilnalProdcutDataUpdateArgs} args - Arguments to update one SelectedFilnalProdcutData.
     * @example
     * // Update one SelectedFilnalProdcutData
     * const selectedFilnalProdcutData = await prisma.selectedFilnalProdcutData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends selectedFilnalProdcutDataUpdateArgs>(args: SelectSubset<T, selectedFilnalProdcutDataUpdateArgs<ExtArgs>>): Prisma__selectedFilnalProdcutDataClient<$Result.GetResult<Prisma.$selectedFilnalProdcutDataPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SelectedFilnalProdcutData.
     * @param {selectedFilnalProdcutDataDeleteManyArgs} args - Arguments to filter SelectedFilnalProdcutData to delete.
     * @example
     * // Delete a few SelectedFilnalProdcutData
     * const { count } = await prisma.selectedFilnalProdcutData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends selectedFilnalProdcutDataDeleteManyArgs>(args?: SelectSubset<T, selectedFilnalProdcutDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SelectedFilnalProdcutData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selectedFilnalProdcutDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SelectedFilnalProdcutData
     * const selectedFilnalProdcutData = await prisma.selectedFilnalProdcutData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends selectedFilnalProdcutDataUpdateManyArgs>(args: SelectSubset<T, selectedFilnalProdcutDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SelectedFilnalProdcutData.
     * @param {selectedFilnalProdcutDataUpsertArgs} args - Arguments to update or create a SelectedFilnalProdcutData.
     * @example
     * // Update or create a SelectedFilnalProdcutData
     * const selectedFilnalProdcutData = await prisma.selectedFilnalProdcutData.upsert({
     *   create: {
     *     // ... data to create a SelectedFilnalProdcutData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SelectedFilnalProdcutData we want to update
     *   }
     * })
     */
    upsert<T extends selectedFilnalProdcutDataUpsertArgs>(args: SelectSubset<T, selectedFilnalProdcutDataUpsertArgs<ExtArgs>>): Prisma__selectedFilnalProdcutDataClient<$Result.GetResult<Prisma.$selectedFilnalProdcutDataPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SelectedFilnalProdcutData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selectedFilnalProdcutDataCountArgs} args - Arguments to filter SelectedFilnalProdcutData to count.
     * @example
     * // Count the number of SelectedFilnalProdcutData
     * const count = await prisma.selectedFilnalProdcutData.count({
     *   where: {
     *     // ... the filter for the SelectedFilnalProdcutData we want to count
     *   }
     * })
    **/
    count<T extends selectedFilnalProdcutDataCountArgs>(
      args?: Subset<T, selectedFilnalProdcutDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SelectedFilnalProdcutDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SelectedFilnalProdcutData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedFilnalProdcutDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SelectedFilnalProdcutDataAggregateArgs>(args: Subset<T, SelectedFilnalProdcutDataAggregateArgs>): Prisma.PrismaPromise<GetSelectedFilnalProdcutDataAggregateType<T>>

    /**
     * Group by SelectedFilnalProdcutData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selectedFilnalProdcutDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends selectedFilnalProdcutDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: selectedFilnalProdcutDataGroupByArgs['orderBy'] }
        : { orderBy?: selectedFilnalProdcutDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, selectedFilnalProdcutDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSelectedFilnalProdcutDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the selectedFilnalProdcutData model
   */
  readonly fields: selectedFilnalProdcutDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for selectedFilnalProdcutData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__selectedFilnalProdcutDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the selectedFilnalProdcutData model
   */ 
  interface selectedFilnalProdcutDataFieldRefs {
    readonly id: FieldRef<"selectedFilnalProdcutData", 'String'>
    readonly productId: FieldRef<"selectedFilnalProdcutData", 'String'>
    readonly productName: FieldRef<"selectedFilnalProdcutData", 'String'>
    readonly productImage: FieldRef<"selectedFilnalProdcutData", 'String'>
    readonly productShop: FieldRef<"selectedFilnalProdcutData", 'String'>
  }
    

  // Custom InputTypes
  /**
   * selectedFilnalProdcutData findUnique
   */
  export type selectedFilnalProdcutDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectedFilnalProdcutData
     */
    select?: selectedFilnalProdcutDataSelect<ExtArgs> | null
    /**
     * Filter, which selectedFilnalProdcutData to fetch.
     */
    where: selectedFilnalProdcutDataWhereUniqueInput
  }

  /**
   * selectedFilnalProdcutData findUniqueOrThrow
   */
  export type selectedFilnalProdcutDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectedFilnalProdcutData
     */
    select?: selectedFilnalProdcutDataSelect<ExtArgs> | null
    /**
     * Filter, which selectedFilnalProdcutData to fetch.
     */
    where: selectedFilnalProdcutDataWhereUniqueInput
  }

  /**
   * selectedFilnalProdcutData findFirst
   */
  export type selectedFilnalProdcutDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectedFilnalProdcutData
     */
    select?: selectedFilnalProdcutDataSelect<ExtArgs> | null
    /**
     * Filter, which selectedFilnalProdcutData to fetch.
     */
    where?: selectedFilnalProdcutDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selectedFilnalProdcutData to fetch.
     */
    orderBy?: selectedFilnalProdcutDataOrderByWithRelationInput | selectedFilnalProdcutDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for selectedFilnalProdcutData.
     */
    cursor?: selectedFilnalProdcutDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selectedFilnalProdcutData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selectedFilnalProdcutData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of selectedFilnalProdcutData.
     */
    distinct?: SelectedFilnalProdcutDataScalarFieldEnum | SelectedFilnalProdcutDataScalarFieldEnum[]
  }

  /**
   * selectedFilnalProdcutData findFirstOrThrow
   */
  export type selectedFilnalProdcutDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectedFilnalProdcutData
     */
    select?: selectedFilnalProdcutDataSelect<ExtArgs> | null
    /**
     * Filter, which selectedFilnalProdcutData to fetch.
     */
    where?: selectedFilnalProdcutDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selectedFilnalProdcutData to fetch.
     */
    orderBy?: selectedFilnalProdcutDataOrderByWithRelationInput | selectedFilnalProdcutDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for selectedFilnalProdcutData.
     */
    cursor?: selectedFilnalProdcutDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selectedFilnalProdcutData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selectedFilnalProdcutData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of selectedFilnalProdcutData.
     */
    distinct?: SelectedFilnalProdcutDataScalarFieldEnum | SelectedFilnalProdcutDataScalarFieldEnum[]
  }

  /**
   * selectedFilnalProdcutData findMany
   */
  export type selectedFilnalProdcutDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectedFilnalProdcutData
     */
    select?: selectedFilnalProdcutDataSelect<ExtArgs> | null
    /**
     * Filter, which selectedFilnalProdcutData to fetch.
     */
    where?: selectedFilnalProdcutDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selectedFilnalProdcutData to fetch.
     */
    orderBy?: selectedFilnalProdcutDataOrderByWithRelationInput | selectedFilnalProdcutDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing selectedFilnalProdcutData.
     */
    cursor?: selectedFilnalProdcutDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selectedFilnalProdcutData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selectedFilnalProdcutData.
     */
    skip?: number
    distinct?: SelectedFilnalProdcutDataScalarFieldEnum | SelectedFilnalProdcutDataScalarFieldEnum[]
  }

  /**
   * selectedFilnalProdcutData create
   */
  export type selectedFilnalProdcutDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectedFilnalProdcutData
     */
    select?: selectedFilnalProdcutDataSelect<ExtArgs> | null
    /**
     * The data needed to create a selectedFilnalProdcutData.
     */
    data: XOR<selectedFilnalProdcutDataCreateInput, selectedFilnalProdcutDataUncheckedCreateInput>
  }

  /**
   * selectedFilnalProdcutData createMany
   */
  export type selectedFilnalProdcutDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many selectedFilnalProdcutData.
     */
    data: selectedFilnalProdcutDataCreateManyInput | selectedFilnalProdcutDataCreateManyInput[]
  }

  /**
   * selectedFilnalProdcutData createManyAndReturn
   */
  export type selectedFilnalProdcutDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectedFilnalProdcutData
     */
    select?: selectedFilnalProdcutDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many selectedFilnalProdcutData.
     */
    data: selectedFilnalProdcutDataCreateManyInput | selectedFilnalProdcutDataCreateManyInput[]
  }

  /**
   * selectedFilnalProdcutData update
   */
  export type selectedFilnalProdcutDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectedFilnalProdcutData
     */
    select?: selectedFilnalProdcutDataSelect<ExtArgs> | null
    /**
     * The data needed to update a selectedFilnalProdcutData.
     */
    data: XOR<selectedFilnalProdcutDataUpdateInput, selectedFilnalProdcutDataUncheckedUpdateInput>
    /**
     * Choose, which selectedFilnalProdcutData to update.
     */
    where: selectedFilnalProdcutDataWhereUniqueInput
  }

  /**
   * selectedFilnalProdcutData updateMany
   */
  export type selectedFilnalProdcutDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update selectedFilnalProdcutData.
     */
    data: XOR<selectedFilnalProdcutDataUpdateManyMutationInput, selectedFilnalProdcutDataUncheckedUpdateManyInput>
    /**
     * Filter which selectedFilnalProdcutData to update
     */
    where?: selectedFilnalProdcutDataWhereInput
  }

  /**
   * selectedFilnalProdcutData upsert
   */
  export type selectedFilnalProdcutDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectedFilnalProdcutData
     */
    select?: selectedFilnalProdcutDataSelect<ExtArgs> | null
    /**
     * The filter to search for the selectedFilnalProdcutData to update in case it exists.
     */
    where: selectedFilnalProdcutDataWhereUniqueInput
    /**
     * In case the selectedFilnalProdcutData found by the `where` argument doesn't exist, create a new selectedFilnalProdcutData with this data.
     */
    create: XOR<selectedFilnalProdcutDataCreateInput, selectedFilnalProdcutDataUncheckedCreateInput>
    /**
     * In case the selectedFilnalProdcutData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<selectedFilnalProdcutDataUpdateInput, selectedFilnalProdcutDataUncheckedUpdateInput>
  }

  /**
   * selectedFilnalProdcutData delete
   */
  export type selectedFilnalProdcutDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectedFilnalProdcutData
     */
    select?: selectedFilnalProdcutDataSelect<ExtArgs> | null
    /**
     * Filter which selectedFilnalProdcutData to delete.
     */
    where: selectedFilnalProdcutDataWhereUniqueInput
  }

  /**
   * selectedFilnalProdcutData deleteMany
   */
  export type selectedFilnalProdcutDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which selectedFilnalProdcutData to delete
     */
    where?: selectedFilnalProdcutDataWhereInput
  }

  /**
   * selectedFilnalProdcutData without action
   */
  export type selectedFilnalProdcutDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the selectedFilnalProdcutData
     */
    select?: selectedFilnalProdcutDataSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SessionScalarFieldEnum: {
    id: 'id',
    shop: 'shop',
    state: 'state',
    isOnline: 'isOnline',
    scope: 'scope',
    expires: 'expires',
    accessToken: 'accessToken',
    userId: 'userId',
    tryOn: 'tryOn',
    tryOnPerProduct: 'tryOnPerProduct'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const BillingScalarFieldEnum: {
    id: 'id',
    title: 'title',
    tag: 'tag',
    amount: 'amount',
    strike_amount: 'strike_amount',
    products: 'products',
    try_on_experiencces: 'try_on_experiencces',
    product_phots: 'product_phots',
    pro_models: 'pro_models',
    support_text: 'support_text',
    upload_your_own_model: 'upload_your_own_model',
    hd_photos: 'hd_photos',
    type: 'type'
  };

  export type BillingScalarFieldEnum = (typeof BillingScalarFieldEnum)[keyof typeof BillingScalarFieldEnum]


  export const SelectProdcutDataScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    productName: 'productName',
    productImage: 'productImage',
    productShop: 'productShop'
  };

  export type SelectProdcutDataScalarFieldEnum = (typeof SelectProdcutDataScalarFieldEnum)[keyof typeof SelectProdcutDataScalarFieldEnum]


  export const SelectedFilnalProdcutDataScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    productName: 'productName',
    productImage: 'productImage',
    productShop: 'productShop'
  };

  export type SelectedFilnalProdcutDataScalarFieldEnum = (typeof SelectedFilnalProdcutDataScalarFieldEnum)[keyof typeof SelectedFilnalProdcutDataScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    shop?: StringFilter<"Session"> | string
    state?: StringFilter<"Session"> | string
    isOnline?: BoolFilter<"Session"> | boolean
    scope?: StringNullableFilter<"Session"> | string | null
    expires?: DateTimeNullableFilter<"Session"> | Date | string | null
    accessToken?: StringFilter<"Session"> | string
    userId?: StringNullableFilter<"Session"> | string | null
    tryOn?: BoolFilter<"Session"> | boolean
    tryOnPerProduct?: IntFilter<"Session"> | number
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrderInput | SortOrder
    expires?: SortOrderInput | SortOrder
    accessToken?: SortOrder
    userId?: SortOrderInput | SortOrder
    tryOn?: SortOrder
    tryOnPerProduct?: SortOrder
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    shop?: StringFilter<"Session"> | string
    state?: StringFilter<"Session"> | string
    isOnline?: BoolFilter<"Session"> | boolean
    scope?: StringNullableFilter<"Session"> | string | null
    expires?: DateTimeNullableFilter<"Session"> | Date | string | null
    accessToken?: StringFilter<"Session"> | string
    userId?: StringNullableFilter<"Session"> | string | null
    tryOn?: BoolFilter<"Session"> | boolean
    tryOnPerProduct?: IntFilter<"Session"> | number
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrderInput | SortOrder
    expires?: SortOrderInput | SortOrder
    accessToken?: SortOrder
    userId?: SortOrderInput | SortOrder
    tryOn?: SortOrder
    tryOnPerProduct?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    shop?: StringWithAggregatesFilter<"Session"> | string
    state?: StringWithAggregatesFilter<"Session"> | string
    isOnline?: BoolWithAggregatesFilter<"Session"> | boolean
    scope?: StringNullableWithAggregatesFilter<"Session"> | string | null
    expires?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    accessToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringNullableWithAggregatesFilter<"Session"> | string | null
    tryOn?: BoolWithAggregatesFilter<"Session"> | boolean
    tryOnPerProduct?: IntWithAggregatesFilter<"Session"> | number
  }

  export type BillingWhereInput = {
    AND?: BillingWhereInput | BillingWhereInput[]
    OR?: BillingWhereInput[]
    NOT?: BillingWhereInput | BillingWhereInput[]
    id?: StringFilter<"Billing"> | string
    title?: StringFilter<"Billing"> | string
    tag?: StringNullableFilter<"Billing"> | string | null
    amount?: IntFilter<"Billing"> | number
    strike_amount?: IntNullableFilter<"Billing"> | number | null
    products?: StringFilter<"Billing"> | string
    try_on_experiencces?: StringFilter<"Billing"> | string
    product_phots?: StringFilter<"Billing"> | string
    pro_models?: IntFilter<"Billing"> | number
    support_text?: StringFilter<"Billing"> | string
    upload_your_own_model?: BoolFilter<"Billing"> | boolean
    hd_photos?: BoolFilter<"Billing"> | boolean
    type?: StringFilter<"Billing"> | string
  }

  export type BillingOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    tag?: SortOrderInput | SortOrder
    amount?: SortOrder
    strike_amount?: SortOrderInput | SortOrder
    products?: SortOrder
    try_on_experiencces?: SortOrder
    product_phots?: SortOrder
    pro_models?: SortOrder
    support_text?: SortOrder
    upload_your_own_model?: SortOrder
    hd_photos?: SortOrder
    type?: SortOrder
  }

  export type BillingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BillingWhereInput | BillingWhereInput[]
    OR?: BillingWhereInput[]
    NOT?: BillingWhereInput | BillingWhereInput[]
    title?: StringFilter<"Billing"> | string
    tag?: StringNullableFilter<"Billing"> | string | null
    amount?: IntFilter<"Billing"> | number
    strike_amount?: IntNullableFilter<"Billing"> | number | null
    products?: StringFilter<"Billing"> | string
    try_on_experiencces?: StringFilter<"Billing"> | string
    product_phots?: StringFilter<"Billing"> | string
    pro_models?: IntFilter<"Billing"> | number
    support_text?: StringFilter<"Billing"> | string
    upload_your_own_model?: BoolFilter<"Billing"> | boolean
    hd_photos?: BoolFilter<"Billing"> | boolean
    type?: StringFilter<"Billing"> | string
  }, "id">

  export type BillingOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    tag?: SortOrderInput | SortOrder
    amount?: SortOrder
    strike_amount?: SortOrderInput | SortOrder
    products?: SortOrder
    try_on_experiencces?: SortOrder
    product_phots?: SortOrder
    pro_models?: SortOrder
    support_text?: SortOrder
    upload_your_own_model?: SortOrder
    hd_photos?: SortOrder
    type?: SortOrder
    _count?: BillingCountOrderByAggregateInput
    _avg?: BillingAvgOrderByAggregateInput
    _max?: BillingMaxOrderByAggregateInput
    _min?: BillingMinOrderByAggregateInput
    _sum?: BillingSumOrderByAggregateInput
  }

  export type BillingScalarWhereWithAggregatesInput = {
    AND?: BillingScalarWhereWithAggregatesInput | BillingScalarWhereWithAggregatesInput[]
    OR?: BillingScalarWhereWithAggregatesInput[]
    NOT?: BillingScalarWhereWithAggregatesInput | BillingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Billing"> | string
    title?: StringWithAggregatesFilter<"Billing"> | string
    tag?: StringNullableWithAggregatesFilter<"Billing"> | string | null
    amount?: IntWithAggregatesFilter<"Billing"> | number
    strike_amount?: IntNullableWithAggregatesFilter<"Billing"> | number | null
    products?: StringWithAggregatesFilter<"Billing"> | string
    try_on_experiencces?: StringWithAggregatesFilter<"Billing"> | string
    product_phots?: StringWithAggregatesFilter<"Billing"> | string
    pro_models?: IntWithAggregatesFilter<"Billing"> | number
    support_text?: StringWithAggregatesFilter<"Billing"> | string
    upload_your_own_model?: BoolWithAggregatesFilter<"Billing"> | boolean
    hd_photos?: BoolWithAggregatesFilter<"Billing"> | boolean
    type?: StringWithAggregatesFilter<"Billing"> | string
  }

  export type selectProdcutDataWhereInput = {
    AND?: selectProdcutDataWhereInput | selectProdcutDataWhereInput[]
    OR?: selectProdcutDataWhereInput[]
    NOT?: selectProdcutDataWhereInput | selectProdcutDataWhereInput[]
    id?: StringFilter<"selectProdcutData"> | string
    productId?: StringFilter<"selectProdcutData"> | string
    productName?: StringFilter<"selectProdcutData"> | string
    productImage?: StringNullableFilter<"selectProdcutData"> | string | null
    productShop?: StringFilter<"selectProdcutData"> | string
  }

  export type selectProdcutDataOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    productImage?: SortOrderInput | SortOrder
    productShop?: SortOrder
  }

  export type selectProdcutDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: selectProdcutDataWhereInput | selectProdcutDataWhereInput[]
    OR?: selectProdcutDataWhereInput[]
    NOT?: selectProdcutDataWhereInput | selectProdcutDataWhereInput[]
    productId?: StringFilter<"selectProdcutData"> | string
    productName?: StringFilter<"selectProdcutData"> | string
    productImage?: StringNullableFilter<"selectProdcutData"> | string | null
    productShop?: StringFilter<"selectProdcutData"> | string
  }, "id">

  export type selectProdcutDataOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    productImage?: SortOrderInput | SortOrder
    productShop?: SortOrder
    _count?: selectProdcutDataCountOrderByAggregateInput
    _max?: selectProdcutDataMaxOrderByAggregateInput
    _min?: selectProdcutDataMinOrderByAggregateInput
  }

  export type selectProdcutDataScalarWhereWithAggregatesInput = {
    AND?: selectProdcutDataScalarWhereWithAggregatesInput | selectProdcutDataScalarWhereWithAggregatesInput[]
    OR?: selectProdcutDataScalarWhereWithAggregatesInput[]
    NOT?: selectProdcutDataScalarWhereWithAggregatesInput | selectProdcutDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"selectProdcutData"> | string
    productId?: StringWithAggregatesFilter<"selectProdcutData"> | string
    productName?: StringWithAggregatesFilter<"selectProdcutData"> | string
    productImage?: StringNullableWithAggregatesFilter<"selectProdcutData"> | string | null
    productShop?: StringWithAggregatesFilter<"selectProdcutData"> | string
  }

  export type selectedFilnalProdcutDataWhereInput = {
    AND?: selectedFilnalProdcutDataWhereInput | selectedFilnalProdcutDataWhereInput[]
    OR?: selectedFilnalProdcutDataWhereInput[]
    NOT?: selectedFilnalProdcutDataWhereInput | selectedFilnalProdcutDataWhereInput[]
    id?: StringFilter<"selectedFilnalProdcutData"> | string
    productId?: StringFilter<"selectedFilnalProdcutData"> | string
    productName?: StringFilter<"selectedFilnalProdcutData"> | string
    productImage?: StringNullableFilter<"selectedFilnalProdcutData"> | string | null
    productShop?: StringFilter<"selectedFilnalProdcutData"> | string
  }

  export type selectedFilnalProdcutDataOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    productImage?: SortOrderInput | SortOrder
    productShop?: SortOrder
  }

  export type selectedFilnalProdcutDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: selectedFilnalProdcutDataWhereInput | selectedFilnalProdcutDataWhereInput[]
    OR?: selectedFilnalProdcutDataWhereInput[]
    NOT?: selectedFilnalProdcutDataWhereInput | selectedFilnalProdcutDataWhereInput[]
    productId?: StringFilter<"selectedFilnalProdcutData"> | string
    productName?: StringFilter<"selectedFilnalProdcutData"> | string
    productImage?: StringNullableFilter<"selectedFilnalProdcutData"> | string | null
    productShop?: StringFilter<"selectedFilnalProdcutData"> | string
  }, "id">

  export type selectedFilnalProdcutDataOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    productImage?: SortOrderInput | SortOrder
    productShop?: SortOrder
    _count?: selectedFilnalProdcutDataCountOrderByAggregateInput
    _max?: selectedFilnalProdcutDataMaxOrderByAggregateInput
    _min?: selectedFilnalProdcutDataMinOrderByAggregateInput
  }

  export type selectedFilnalProdcutDataScalarWhereWithAggregatesInput = {
    AND?: selectedFilnalProdcutDataScalarWhereWithAggregatesInput | selectedFilnalProdcutDataScalarWhereWithAggregatesInput[]
    OR?: selectedFilnalProdcutDataScalarWhereWithAggregatesInput[]
    NOT?: selectedFilnalProdcutDataScalarWhereWithAggregatesInput | selectedFilnalProdcutDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"selectedFilnalProdcutData"> | string
    productId?: StringWithAggregatesFilter<"selectedFilnalProdcutData"> | string
    productName?: StringWithAggregatesFilter<"selectedFilnalProdcutData"> | string
    productImage?: StringNullableWithAggregatesFilter<"selectedFilnalProdcutData"> | string | null
    productShop?: StringWithAggregatesFilter<"selectedFilnalProdcutData"> | string
  }

  export type SessionCreateInput = {
    id: string
    shop: string
    state: string
    isOnline?: boolean
    scope?: string | null
    expires?: Date | string | null
    accessToken: string
    userId?: string | null
    tryOn?: boolean
    tryOnPerProduct?: number
  }

  export type SessionUncheckedCreateInput = {
    id: string
    shop: string
    state: string
    isOnline?: boolean
    scope?: string | null
    expires?: Date | string | null
    accessToken: string
    userId?: string | null
    tryOn?: boolean
    tryOnPerProduct?: number
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tryOn?: BoolFieldUpdateOperationsInput | boolean
    tryOnPerProduct?: IntFieldUpdateOperationsInput | number
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tryOn?: BoolFieldUpdateOperationsInput | boolean
    tryOnPerProduct?: IntFieldUpdateOperationsInput | number
  }

  export type SessionCreateManyInput = {
    id: string
    shop: string
    state: string
    isOnline?: boolean
    scope?: string | null
    expires?: Date | string | null
    accessToken: string
    userId?: string | null
    tryOn?: boolean
    tryOnPerProduct?: number
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tryOn?: BoolFieldUpdateOperationsInput | boolean
    tryOnPerProduct?: IntFieldUpdateOperationsInput | number
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tryOn?: BoolFieldUpdateOperationsInput | boolean
    tryOnPerProduct?: IntFieldUpdateOperationsInput | number
  }

  export type BillingCreateInput = {
    id: string
    title: string
    tag?: string | null
    amount: number
    strike_amount?: number | null
    products: string
    try_on_experiencces: string
    product_phots: string
    pro_models: number
    support_text: string
    upload_your_own_model?: boolean
    hd_photos?: boolean
    type: string
  }

  export type BillingUncheckedCreateInput = {
    id: string
    title: string
    tag?: string | null
    amount: number
    strike_amount?: number | null
    products: string
    try_on_experiencces: string
    product_phots: string
    pro_models: number
    support_text: string
    upload_your_own_model?: boolean
    hd_photos?: boolean
    type: string
  }

  export type BillingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    strike_amount?: NullableIntFieldUpdateOperationsInput | number | null
    products?: StringFieldUpdateOperationsInput | string
    try_on_experiencces?: StringFieldUpdateOperationsInput | string
    product_phots?: StringFieldUpdateOperationsInput | string
    pro_models?: IntFieldUpdateOperationsInput | number
    support_text?: StringFieldUpdateOperationsInput | string
    upload_your_own_model?: BoolFieldUpdateOperationsInput | boolean
    hd_photos?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
  }

  export type BillingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    strike_amount?: NullableIntFieldUpdateOperationsInput | number | null
    products?: StringFieldUpdateOperationsInput | string
    try_on_experiencces?: StringFieldUpdateOperationsInput | string
    product_phots?: StringFieldUpdateOperationsInput | string
    pro_models?: IntFieldUpdateOperationsInput | number
    support_text?: StringFieldUpdateOperationsInput | string
    upload_your_own_model?: BoolFieldUpdateOperationsInput | boolean
    hd_photos?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
  }

  export type BillingCreateManyInput = {
    id: string
    title: string
    tag?: string | null
    amount: number
    strike_amount?: number | null
    products: string
    try_on_experiencces: string
    product_phots: string
    pro_models: number
    support_text: string
    upload_your_own_model?: boolean
    hd_photos?: boolean
    type: string
  }

  export type BillingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    strike_amount?: NullableIntFieldUpdateOperationsInput | number | null
    products?: StringFieldUpdateOperationsInput | string
    try_on_experiencces?: StringFieldUpdateOperationsInput | string
    product_phots?: StringFieldUpdateOperationsInput | string
    pro_models?: IntFieldUpdateOperationsInput | number
    support_text?: StringFieldUpdateOperationsInput | string
    upload_your_own_model?: BoolFieldUpdateOperationsInput | boolean
    hd_photos?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
  }

  export type BillingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    strike_amount?: NullableIntFieldUpdateOperationsInput | number | null
    products?: StringFieldUpdateOperationsInput | string
    try_on_experiencces?: StringFieldUpdateOperationsInput | string
    product_phots?: StringFieldUpdateOperationsInput | string
    pro_models?: IntFieldUpdateOperationsInput | number
    support_text?: StringFieldUpdateOperationsInput | string
    upload_your_own_model?: BoolFieldUpdateOperationsInput | boolean
    hd_photos?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
  }

  export type selectProdcutDataCreateInput = {
    id: string
    productId: string
    productName: string
    productImage?: string | null
    productShop: string
  }

  export type selectProdcutDataUncheckedCreateInput = {
    id: string
    productId: string
    productName: string
    productImage?: string | null
    productShop: string
  }

  export type selectProdcutDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: NullableStringFieldUpdateOperationsInput | string | null
    productShop?: StringFieldUpdateOperationsInput | string
  }

  export type selectProdcutDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: NullableStringFieldUpdateOperationsInput | string | null
    productShop?: StringFieldUpdateOperationsInput | string
  }

  export type selectProdcutDataCreateManyInput = {
    id: string
    productId: string
    productName: string
    productImage?: string | null
    productShop: string
  }

  export type selectProdcutDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: NullableStringFieldUpdateOperationsInput | string | null
    productShop?: StringFieldUpdateOperationsInput | string
  }

  export type selectProdcutDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: NullableStringFieldUpdateOperationsInput | string | null
    productShop?: StringFieldUpdateOperationsInput | string
  }

  export type selectedFilnalProdcutDataCreateInput = {
    id: string
    productId: string
    productName: string
    productImage?: string | null
    productShop: string
  }

  export type selectedFilnalProdcutDataUncheckedCreateInput = {
    id: string
    productId: string
    productName: string
    productImage?: string | null
    productShop: string
  }

  export type selectedFilnalProdcutDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: NullableStringFieldUpdateOperationsInput | string | null
    productShop?: StringFieldUpdateOperationsInput | string
  }

  export type selectedFilnalProdcutDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: NullableStringFieldUpdateOperationsInput | string | null
    productShop?: StringFieldUpdateOperationsInput | string
  }

  export type selectedFilnalProdcutDataCreateManyInput = {
    id: string
    productId: string
    productName: string
    productImage?: string | null
    productShop: string
  }

  export type selectedFilnalProdcutDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: NullableStringFieldUpdateOperationsInput | string | null
    productShop?: StringFieldUpdateOperationsInput | string
  }

  export type selectedFilnalProdcutDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: NullableStringFieldUpdateOperationsInput | string | null
    productShop?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrder
    expires?: SortOrder
    accessToken?: SortOrder
    userId?: SortOrder
    tryOn?: SortOrder
    tryOnPerProduct?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    tryOnPerProduct?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrder
    expires?: SortOrder
    accessToken?: SortOrder
    userId?: SortOrder
    tryOn?: SortOrder
    tryOnPerProduct?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrder
    expires?: SortOrder
    accessToken?: SortOrder
    userId?: SortOrder
    tryOn?: SortOrder
    tryOnPerProduct?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    tryOnPerProduct?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BillingCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    tag?: SortOrder
    amount?: SortOrder
    strike_amount?: SortOrder
    products?: SortOrder
    try_on_experiencces?: SortOrder
    product_phots?: SortOrder
    pro_models?: SortOrder
    support_text?: SortOrder
    upload_your_own_model?: SortOrder
    hd_photos?: SortOrder
    type?: SortOrder
  }

  export type BillingAvgOrderByAggregateInput = {
    amount?: SortOrder
    strike_amount?: SortOrder
    pro_models?: SortOrder
  }

  export type BillingMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    tag?: SortOrder
    amount?: SortOrder
    strike_amount?: SortOrder
    products?: SortOrder
    try_on_experiencces?: SortOrder
    product_phots?: SortOrder
    pro_models?: SortOrder
    support_text?: SortOrder
    upload_your_own_model?: SortOrder
    hd_photos?: SortOrder
    type?: SortOrder
  }

  export type BillingMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    tag?: SortOrder
    amount?: SortOrder
    strike_amount?: SortOrder
    products?: SortOrder
    try_on_experiencces?: SortOrder
    product_phots?: SortOrder
    pro_models?: SortOrder
    support_text?: SortOrder
    upload_your_own_model?: SortOrder
    hd_photos?: SortOrder
    type?: SortOrder
  }

  export type BillingSumOrderByAggregateInput = {
    amount?: SortOrder
    strike_amount?: SortOrder
    pro_models?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type selectProdcutDataCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    productShop?: SortOrder
  }

  export type selectProdcutDataMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    productShop?: SortOrder
  }

  export type selectProdcutDataMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    productShop?: SortOrder
  }

  export type selectedFilnalProdcutDataCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    productShop?: SortOrder
  }

  export type selectedFilnalProdcutDataMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    productShop?: SortOrder
  }

  export type selectedFilnalProdcutDataMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    productShop?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BillingDefaultArgs instead
     */
    export type BillingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BillingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use selectProdcutDataDefaultArgs instead
     */
    export type selectProdcutDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = selectProdcutDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use selectedFilnalProdcutDataDefaultArgs instead
     */
    export type selectedFilnalProdcutDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = selectedFilnalProdcutDataDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}